#!/usr/bin/env python

import io
import json
import magic
import hashlib
import zipfile
import logging
import requests
from io import BytesIO
from mwdblib import MWDB
from datetime import datetime, timedelta

requests.packages.urllib3.disable_warnings()

log = logging.getLogger(__name__)

__author__  = 'c3rb3ru5'
__version__ = '1.0.1'


class MWDBFeedsModule():

    """
    A MalwareBazaar Collector Module for mwdb-feeds
    """

    def __init__(self, config, mwdb):
        self.name = 'malwarebazaar'
        self.tag = f'feed:{self.name}'
        self.url = 'https://mb-api.abuse.ch/downloads/'
        self.api = 'https://mb-api.abuse.ch/api/v1/'
        self.enabled = self.startup(config)
        self.mwdb = mwdb

    def startup(self, config):
        options = ['days', 'enabled', 'password', 'meta-tags']
        for option in options:
            if config.has_option(self.name, option) is False:
                log.warning(f'{self.name} section is missing the {option} option')
                return False
        self.config = config
        return self.config.getboolean(self.name, 'enabled')
    
    # returns all the JSON metadata for a sample 
    def get_sample_info(self, sha256):
        query_sample = {
            'query': 'get_info',
        }

        query_sample["hash"] = sha256
        sample_data = requests.post(self.api, query_sample)
        sample_data = sample_data.text
        data = json.loads(sample_data)["data"][0]
        log.debug(data)
        return data
    
    # generates the meta-data tags from samples being uploaded to malwarebazaar
    def generate_tags(self, family_name, sample_data):
        tags = ["family:%s" % family_name, "filetype:%s" %
            sample_data["file_type_mime"]]

        reporter = sample_data.get("reporter")
        if reporter is not None:
            tags.append("uploader:%s" % reporter)
        delivery_mechanism = sample_data.get("delivery_method")
        if delivery_mechanism is not None:
            tags.append("delivery_method:%s" % delivery_mechanism)
        
        if sample_data.get("tags"):
            for tag in sample_data["tags"]:
                tags.append(tag)

        if sample_data.get("yara_rules"):
            for rule_match in sample_data["yara_rules"]:
                tags.append("yara:%s" % rule_match["rule_name"])

        return tags


    def send_zip_contents(self, content):
        if magic.from_buffer(content, mime=True) != 'application/zip':
            return False
        z = zipfile.ZipFile(io.BytesIO(content))
        z.setpassword(self.config.get(self.name, 'password').encode())
        for z_file in z.namelist():
            if not z_file.endswith('/'):
                data = z.read(z_file)
                name = hashlib.sha256(data).hexdigest()
                
                meta_tags_bool = self.config.getboolean(self.name, 'meta-tags')
                if meta_tags_bool:
                    sample_metadata = self.get_sample_info(name)
                    if sample_metadata is not None:
                        tags = self.generate_tags(sample_metadata["signature"], sample_metadata)
                    else:
                        tags = {}

                if self.mwdb.query_file(name, raise_not_found=False) is None:
                    log.debug(f'uploading {name}')
                    result = self.mwdb.upload_file(name=name, content=data)
                    result.add_tag(self.tag)
                    if meta_tags_bool:
                        for tag in tags:
                            result.add_tag(tag)
                else:
                    log.debug(f'{name} already exits on the server')
        z.close()
        return True

    def get_urls(self):
        urls = []
        for day in range(1, self.config.getint(self.name, 'days')):
            date = datetime.now() - timedelta(days=day)
            date = date.strftime("%Y-%m-%d")
            urls.append(self.url + date + '.zip')
        return urls

    def main(self):
        result = {
            'module': self.name,
            'success': True
        }
        try:
            urls = self.get_urls()
            for url in urls:
                log.debug(url)
                r = requests.get(url, verify=False)
                if r.status_code == 200:
                    self.send_zip_contents(r.content)
                else:
                    log.error(f'failed with status code {r.status_code}')
        except Exception as error:
            log.error(error)
            result['success'] = False
        return result
